[{"/home/useradd/workspace/python/days-since-client/src/index.js":"1","/home/useradd/workspace/python/days-since-client/src/reportWebVitals.js":"2","/home/useradd/workspace/python/days-since-client/src/components/DaysSince.js":"3","/home/useradd/workspace/python/days-since-client/src/components/ApplicationViews.js":"4","/home/useradd/workspace/python/days-since-client/src/components/auth/Login.js":"5","/home/useradd/workspace/python/days-since-client/src/components/auth/Register.js":"6","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardList.js":"7","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardProvider.js":"8","/home/useradd/workspace/python/days-since-client/src/components/nav/NavBar.js":"9","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingForm.js":"10","/home/useradd/workspace/python/days-since-client/src/components/journalentry/journalEntryForm.js":"11","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalsForm.js":"12","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingProvider.js":"13","/home/useradd/workspace/python/days-since-client/src/components/journalentry/JournalEntryProvider.js":"14","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalProvider.js":"15","/home/useradd/workspace/python/days-since-client/src/components/goals/Goals.js":"16","/home/useradd/workspace/python/days-since-client/src/components/goals/CheckedGoalProvider.js":"17","/home/useradd/workspace/python/days-since-client/src/components/goals/CompletedGoalsList.js":"18","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingList.js":"19","/home/useradd/workspace/python/days-since-client/src/components/journalentry/Journal.js":"20","/home/useradd/workspace/python/days-since-client/src/components/articles/Articles.js":"21","/home/useradd/workspace/python/days-since-client/src/components/articles/ArticleProvider.js":"22","/home/useradd/workspace/python/days-since-client/src/components/articles/ArticleForm.js":"23","/home/useradd/workspace/python/days-since-client/src/components/comments/Comments.js":"24","/home/useradd/workspace/python/days-since-client/src/components/comments/CommentProvider.js":"25","/home/useradd/workspace/python/days-since-client/src/components/comments/CommentForm.js":"26"},{"size":661,"mtime":1607631784522,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1607618335160,"results":"29","hashOfConfig":"28"},{"size":653,"mtime":1609125938883,"results":"30","hashOfConfig":"28"},{"size":6639,"mtime":1609446298073,"results":"31","hashOfConfig":"28"},{"size":2666,"mtime":1609125938888,"results":"32","hashOfConfig":"28"},{"size":3685,"mtime":1609125938892,"results":"33","hashOfConfig":"28"},{"size":2620,"mtime":1609125938932,"results":"34","hashOfConfig":"28"},{"size":1249,"mtime":1609125938935,"results":"35","hashOfConfig":"28"},{"size":1433,"mtime":1609125938929,"results":"36","hashOfConfig":"28"},{"size":16250,"mtime":1609202629778,"results":"37","hashOfConfig":"28"},{"size":3633,"mtime":1609180973798,"results":"38","hashOfConfig":"28"},{"size":4307,"mtime":1609183322021,"results":"39","hashOfConfig":"28"},{"size":2635,"mtime":1609125938942,"results":"40","hashOfConfig":"28"},{"size":2551,"mtime":1609125938923,"results":"41","hashOfConfig":"28"},{"size":2837,"mtime":1609180745292,"results":"42","hashOfConfig":"28"},{"size":5316,"mtime":1609179144256,"results":"43","hashOfConfig":"28"},{"size":1268,"mtime":1609125938897,"results":"44","hashOfConfig":"28"},{"size":2279,"mtime":1609125938901,"results":"45","hashOfConfig":"28"},{"size":5964,"mtime":1609203557347,"results":"46","hashOfConfig":"28"},{"size":4369,"mtime":1609125938919,"results":"47","hashOfConfig":"28"},{"size":2001,"mtime":1609452387652,"results":"48","hashOfConfig":"28"},{"size":1981,"mtime":1609445468378,"results":"49","hashOfConfig":"28"},{"size":2675,"mtime":1609450004531,"results":"50","hashOfConfig":"28"},{"size":1099,"mtime":1609453617330,"results":"51","hashOfConfig":"28"},{"size":1831,"mtime":1609453344075,"results":"52","hashOfConfig":"28"},{"size":1695,"mtime":1609446870225,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"z72w0g",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},"/home/useradd/workspace/python/days-since-client/src/index.js",[],["117","118"],"/home/useradd/workspace/python/days-since-client/src/reportWebVitals.js",[],"/home/useradd/workspace/python/days-since-client/src/components/DaysSince.js",[],"/home/useradd/workspace/python/days-since-client/src/components/ApplicationViews.js",["119"],"/home/useradd/workspace/python/days-since-client/src/components/auth/Login.js",[],"/home/useradd/workspace/python/days-since-client/src/components/auth/Register.js",[],"/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardList.js",["120","121","122","123","124"],"import React, { useContext, useEffect } from 'react';\nimport { ScoreBoardContext } from './ScoreBoardProvider'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport './ScoreBoard.css';\nexport const ScoreBoardList = (props) => {\n  const [score, setScore] = useState()\n  const [spacing] = React.useState(2);\n  const { createScoreBoard, getScoreBoardData, scoreBoardData } = useContext(ScoreBoardContext)\n  useEffect(() => {\n    getScoreBoardData()\n  // let counter = 0\n  //  const dateFinder = scoreBoardData.map((value)=> {\n  //      return value.created\n  //    })\n  //    const newDateFinder = new Date(dateFinder)\n  //    const nowsDate = Date.now()\n  //    if(newDateFinder > nowsDate ) {\n  //      setScore(counter++)\n   }, [])\n\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      height: 200,\n      width: 300,\n      marginTop: 50,\n      textAlign: 'center',\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n    Button: {\n      marginTop: 5\n    }\n  }));\n  const reversedScore = scoreBoardData.slice().reverse()\n const classes = useStyles();\n  return <>\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={spacing}>\n          <Grid>\n            <Paper className={classes.paper} style={{ backgroundColor: \"#9dabb1\" }}>\n              <div>\n                <h1 className=\"days_since_score\">Days Since</h1>\n                {reversedScore.slice(0, 1).map((value) => {\n                  return (\n                    <div>\n                    <h1>{value.daysSinceBoard}</h1>\n                    <Button style={{ backgroundColor: \"#1B4353\", margin:10 }} onClick={() => {}} className={classes.Button} variant=\"contained\" color=\"primary\">add a day</Button>\n                    </div>\n                  )\n                })}\n                <h1 className=\"score\"></h1>\n                {/* <Button style={{ backgroundColor: \"#1B4353\", margin:10 }} onClick={() => setScore(score + 1) & constructANewScore()} className={classes.Button} variant=\"contained\" color=\"primary\">add a day</Button>\n                <Button style={{ backgroundColor: \"#1B4353\", margin:10  }} onClick={() => setScore(0) & constructANewScore()} className={classes.Button} variant=\"contained\" color=\"primary\">reset</Button> */}\n              </div>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  </>\n}","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/nav/NavBar.js",["125"],"import React from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 3,\n\n  },\n});\n\nexport const NavBar = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  \n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n\n    <Paper className={classes.root}>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Link to='/' style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"home\"></Tab></Link>\n        <Link to=\"/wellbeing\" style={{ textDecoration: 'none', color: 'black' }} ><Tab label=\"well-being\"></Tab></Link>\n        <Link to=\"/journal\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"journal\"></Tab></Link>\n        <Link to=\"/goals\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"goals\"></Tab></Link>\n        <Link to=\"/articles\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"articles\"></Tab></Link>\n        <Link to=\"/login\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"log-out\"></Tab></Link>\n      </Tabs>\n    </Paper>\n  );\n}\n\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingForm.js",["126","127","128"],"import React, { useContext, useState, useEffect } from 'react';\nimport { WellBeingContext } from './WellBeingProvider'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport './WellBeing.css'\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'center',\n        marginLeft: 30,\n        marginTop: 50,\n        width: 500\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200,\n    },\n}));\n\nexport function WellBeingForm(props) {\n    const { createWellBeingData, getWellBeingData, updateWellBeingData, getWellBeingDataById } = useContext(WellBeingContext)\n\n    const [sliderValue, setSliderValue] = useState(0)\n\n    const updateRange = (e, data) => {\n        setSliderValue(data)\n    }\n    const [sliderValueTwo, setSliderValueTwo] = useState(0)\n    const updateRangeTwo = (e, data) => {\n        setSliderValueTwo(data)\n    }\n    const [sliderValueThree, setSliderValueThree] = useState(0)\n    const updateRangeThree = (e, data) => {\n        setSliderValueThree(data)\n    }\n    const [sliderValueFour, setSliderValueFour] = useState(0)\n    const updateRangeFour = (e, data) => {\n        setSliderValueFour(data)\n    }\n\n    const [tinglingChecked, setTinglingChecked] = useState(0)\n    const [noSymptomsChecked, setNoSymptomsChecked] = useState(0)\n    const [numbnessChecked, setNumbnessChecked] = useState(0)\n    const [weaknessChecked, setWeaknessChecked] = useState(0)\n    const [stiffnessChecked, setStiffnessChecked] = useState(0)\n    const [coordinationChecked, setCoordinationOrBalanceProblemsChecked] = useState(0)\n    const [heatSensitivityChecked, setHeatSensitivityChecked] = useState(0)\n    const [incontenanceChecked, setIncontenanceChecked] = useState(0)\n    const [brainFogChecked, setBrainFogChecked] = useState(0)\n\n\n    const classes = useStyles();\n\n    function valuetext(value) {\n        return `${value}`;\n    }\n    // initialize an empty state array\n    const [checkedValues, setCheckedValues] = useState([\n\n    ]);\n\n    const [defaultvalues, setDefaultvalues] = useState({})\n    // console.log(checkedValues)\n    useEffect(() => {\n        getWellBeingData()\n        getWellBeingDataById(props.match.params.wellBeingId)\n            .then(res => setDefaultvalues(res))\n    }, [])\n\n    console.log(defaultvalues)\n\n    const toggle = (e) => {\n        const name = e.target.name;\n        if (name.includes('noSymptoms')) setNoSymptomsChecked(true)\n\n        if (name.includes('numbess')) setNumbnessChecked(true)\n\n        if (name.includes('tingling')) setTinglingChecked(true)\n\n        if (name.includes('weakness')) setWeaknessChecked(true)\n\n        if (name.includes('stiffness')) setStiffnessChecked(true)\n\n        if (name.includes('coordinationOrBalanceProblems')) setCoordinationOrBalanceProblemsChecked(true)\n\n        if (name.includes('heatSensitivity')) setHeatSensitivityChecked(true)\n\n        if (name.includes('incontenance')) setIncontenanceChecked(true)\n\n        if (name.includes('brainFog')) setBrainFogChecked(true)\n\n        console.log('toggle name', e.target.name);\n        // set a variable that equals the name that is checked\n        if (checkedValues.includes(name)) {\n            // if that name exists in the state array\n            const updatedCheckedValues = checkedValues.filter(checkedValue => {\n                // set a variable called updateCheckedValues that filters the values\n                // that have not been checked\n                return checkedValue != name\n            })\n            setCheckedValues(updatedCheckedValues)\n            // set those unchchecked values to your state array\n        } else {\n            const updatedCheckedValues = checkedValues.slice()\n            // else make a copy of the state array\n            updatedCheckedValues.push(name)\n            // push the checked names into the state array\n            setCheckedValues(updatedCheckedValues)\n        }\n    }\n\n    const dateData = new Date().toISOString().slice(0, 10);\n\n    const constructANewDay = () => {\n        console.log(\"====> params\", props)\n        if (props.match.params.wellBeingId) {\n\n            updateWellBeingData({\n                id: props.match.params.wellBeingId,\n                user_id: localStorage.getItem(\"user_id\"),\n                date: dateData,\n                fatigueScale: sliderValue,\n                painScale: sliderValueTwo,\n                emotionalWellBeing: sliderValueThree,\n                hoursOfSleep: sliderValueFour,\n                noSymptoms: noSymptomsChecked,\n                numbness: numbnessChecked,\n                tingling: tinglingChecked,\n                weakness: weaknessChecked,\n                stiffness: stiffnessChecked,\n                coordinationOrBalanceProblems: coordinationChecked,\n                heatSensitivity: heatSensitivityChecked,\n                incontenance: incontenanceChecked,\n                brainFog: brainFogChecked,\n            }).then(() =>\n                props.history.push('/wellbeing'))\n        } else {\n\n            const newEntry = {\n\n                user_id: localStorage.getItem(\"user_id\"),\n                date: dateData,\n                fatigueScale: sliderValue,\n                painScale: sliderValueTwo,\n                emotionalWellBeing: sliderValueThree,\n                hoursOfSleep: sliderValueFour,\n                noSymptoms: noSymptomsChecked,\n                numbness: numbnessChecked,\n                tingling: tinglingChecked,\n                weakness: weaknessChecked,\n                stiffness: stiffnessChecked,\n                coordinationOrBalanceProblems: coordinationChecked,\n                heatSensitivity: heatSensitivityChecked,\n                incontenance: incontenanceChecked,\n                brainFog: brainFogChecked,\n            }\n            createWellBeingData(newEntry)\n        }\n    }\n\n    if (props.match.params.wellBeingId) {\n        return (\n            <>\n        \n                <h1>edit form</h1>\n                <div className=\"slider_container\">\n                    <Typography id=\"discrete-slider\" gutterBottom>\n                        <h2>fatigue-scale: 1-5</h2>\n                    </Typography>\n                    {defaultvalues.fatigueScale >= 0 &&\n                        <Slider\n\n                            defaultValue={defaultvalues.fatigueScale}\n                            onChange={updateRange}\n                            getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={1}\n                            marks\n                            min={1}\n                            max={5}\n                        />\n                    }\n\n                    <Typography id=\"discrete-slider\" gutterBottom>\n                        <h2>pain-scale: 1-5</h2>\n                    </Typography>\n                    {defaultvalues.fatigueScale >= 0 &&\n                        <Slider\n\n                            defaultValue={defaultvalues.painScale}\n                            onChange={updateRangeTwo}\n                            getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={1}\n                            marks\n                            min={1}\n                            max={5}\n                        />\n                    }\n                    <Typography id=\"discrete-slider\" gutterBottom>\n                        <h2>emotional-well-being: 1-5</h2>\n                    </Typography>\n                    {defaultvalues.emotionalWellBeing >= 0 &&\n                        <Slider\n                            onChange={updateRangeThree}\n                            defaultValue={defaultvalues.emotionalWellBeing}\n                            getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={1}\n                            marks\n                            min={1}\n                            max={5}\n                        />\n                    }\n                    <Typography id=\"discrete-slider\" gutterBottom>\n                        <h2>hours of sleep</h2>\n                    </Typography>\n                    {defaultvalues.hoursOfSleep >= 0 &&\n                        <Slider\n                            onChange={updateRangeFour}\n                            defaultValue={defaultvalues.hoursOfSleep}\n                            getAriaValueText={valuetext}\n                            aria-labelledby=\"discrete-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={1}\n                            marks\n                            min={1}\n                            max={10}\n                        />\n                    }\n                    <br />\n                    <br />\n                </div>\n                <h2>Symptoms</h2>\n\n                <div className=\"checkbox_container\">\n                    <div>\n                        <label>None</label>\n                        {<input type=\"checkbox\" name=\"noSymptoms\" onChange={toggle} defaultChecked={defaultvalues.noSymptoms && defaultvalues.noSymptoms} />}\n                    </div>\n                    <div>\n                        <label>numbness</label>\n                        {<input type=\"checkbox\" name=\"numbness\" onChange={toggle} defaultChecked={defaultvalues.numbness && defaultvalues.numbness} />}\n                    </div>\n\n                    <div>\n                        <label>tingling</label>\n                        {<input type=\"checkbox\" name=\"tingling\" onChange={toggle} defaultChecked={defaultvalues.tingling && defaultvalues.tingling} />}\n                    </div>\n\n                    <div>\n                        <label>weakness</label>\n                        {<input type=\"checkbox\" name=\"weakness\" onChange={toggle} defaultChecked={defaultvalues.weakness && defaultvalues.weakness} />}\n                    </div>\n\n                    <div>\n                        <label>coordination-problems</label>\n                        {<input type=\"checkbox\" name=\"coordinationOrBalanceProblems\" onChange={toggle} defaultChecked={defaultvalues.coordinationOrBalanceProblems && defaultvalues.coordinationOrBalanceProblems} />}\n                    </div>\n\n                    <div>\n                        <label>heat-sensitivity</label>\n                        {<input type=\"checkbox\" name=\"heatSensitivity\" onChange={toggle} defaultChecked={defaultvalues.heatSensitivity && defaultvalues.heatSensitivity} />}\n                    </div>\n\n                    <div>\n                        <label>incontenance</label>\n                        {<input type=\"checkbox\" name=\"incontenance\" onChange={toggle} defaultChecked={defaultvalues.incontenance && defaultvalues.incontenance} />}\n                    </div>\n                </div>\n                <div className=\"button_container\">\n                    <Button onClick={constructANewDay} style={{ backgroundColor: \"#1B4353\", margin: 10 }} className={classes.Button} variant=\"contained\" color=\"primary\" >submit</Button>\n                </div>\n\n            </>\n        )\n    } else {\n\n        return <>\n\n            <div className=\"slider_container\">\n                <Typography id=\"discrete-slider\" gutterBottom>\n                    <h2>fatigue-scale: 1-5</h2>\n                </Typography>\n                <Slider\n\n                    value={sliderValue}\n                    onChange={updateRange}\n                    getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={1}\n                    marks\n                    min={1}\n                    max={5}\n                />\n                <Typography id=\"discrete-slider\" gutterBottom>\n                    <h2>pain-scale: 1-5</h2>\n                </Typography>\n                <Slider\n\n                    value={sliderValueTwo}\n                    onChange={updateRangeTwo}\n                    getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={1}\n                    marks\n                    min={1}\n                    max={5}\n                />\n                <Typography id=\"discrete-slider\" gutterBottom>\n                    <h2>emotional-well-being: 1-5</h2>\n                </Typography>\n                <Slider\n                    onChange={updateRangeThree}\n                    value={sliderValueThree}\n                    getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={1}\n                    marks\n                    min={1}\n                    max={5}\n                />\n                <Typography id=\"discrete-slider\" gutterBottom>\n                    <h2>hours of sleep</h2>\n                </Typography>\n                <Slider\n                    onChange={updateRangeFour}\n                    value={sliderValueFour}\n                    getAriaValueText={valuetext}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={1}\n                    marks\n                    min={1}\n                    max={10}\n                />\n                <br />\n                <br />\n                <h2>Symptoms</h2>\n            </div>\n            <div className=\"checkbox_container\">\n                <div>\n                    <label>none</label>\n                    <input type=\"checkbox\" name='noSymptoms' onChange={toggle} checked={checkedValues.includes('noSymptoms')} />\n                </div>\n                <div>\n                    <label>numbness</label>\n                    <input type=\"checkbox\" name='numbness' onChange={toggle} checked={checkedValues.includes('numbness')} />\n                </div>\n                <div>\n                    <label>tingling</label>\n                    <input type=\"checkbox\" name='tingling' onChange={toggle} checked={checkedValues.includes('tingling')} />\n                </div>\n                <div>\n                    <label>weakness</label>\n                    <input type=\"checkbox\" name='weakness' onChange={toggle} checked={checkedValues.includes('weakness')} />\n                </div>\n                <div>\n                    <label>stiffness</label>\n                    <input type=\"checkbox\" name='stiffness' onChange={toggle} checked={checkedValues.includes('stiffness')} />\n                </div>\n                <div>\n                    <label>coordiantion-problems</label>\n                    <input type=\"checkbox\" name='coordinationOrBalanceProblems' onChange={toggle} checked={checkedValues.includes('coordinationOrBalanceProblems')} />\n                </div>\n                <div>\n                    <label>heat-sensitivity</label>\n                    < input type=\"checkbox\" type=\"checkbox\" name=\"heatSensitivity\" onChange={toggle} checked={checkedValues.includes('heatSensitivity')} />\n                </div>\n                <div>\n                    <label>incontenance</label>\n                    <input type=\"checkbox\" name=\"incontenance\" onChange={toggle} checked={checkedValues.includes('incontenance')} />\n                </div>\n                <div>\n                    <label>brain-fog</label>\n                    < input type=\"checkbox\" name=\"brainFog\" onChange={toggle} checked={checkedValues.includes('brainFog')} />\n                </div>\n            </div>\n            <div className=\"button_container\">\n                <Button onClick={constructANewDay} style={{ backgroundColor: \"#1B4353\", margin: 10 }} className={classes.Button} variant=\"contained\" color=\"primary\" >submit</Button>\n            </div>\n        </>\n    }\n}    \n","/home/useradd/workspace/python/days-since-client/src/components/journalentry/journalEntryForm.js",["129"],"import React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { JournalEntryContext } from './JournalEntryProvider'\nimport { useHistory } from 'react-router-dom';\n\nexport const JournalEntryForm = (props) => {\n\n    \n    const { getJournalEntryData, createJournalEntryData, getJournalEntryDataById, updateJournalData } = useContext(JournalEntryContext)\n    const [currentJournalEntry, setJournalEntry] = useState('')\n    const [currentDate, setCurrentDate] = useState('')\n    const [defaultvalues, setDefaultvalues] = useState({})\n\n    useEffect(() => {\n        getJournalEntryData()\n        getJournalEntryDataById(props.match.params.journalId)\n        .then(res => setDefaultvalues(res))\n    }, [])\n\n    const editMode = props.match.params.journalId\n\n    const handleChange = (e) => {\n        const name = e.target.value\n        setJournalEntry(name)\n    }\n\n    const handleChangeTwo = (e) => {\n        const name = e.target.value\n        setCurrentDate(name)\n    }\n\n    const dateData = new Date(Date.now()).toJSON().slice(0, 10);\n\n\n    const history = useHistory()\n\n    const constructANewDay = (props) => {\n        if (editMode) {\n\n            updateJournalData({\n                id: editMode,\n                date: dateData,\n                entry: currentJournalEntry,\n            }).then(() => {\n                history.push('/journal')\n            })\n        } else {\n\n        const newEntry = {\n            date: dateData,\n            entry: currentJournalEntry,\n        }\n        createJournalEntryData(newEntry).then(() => {\n            getJournalEntryData().then(() => {\n                history.push('/journal')\n            })\n        })\n    }\n}\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n            alignContent: 'center'\n        },\n        textField: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            marginTop: 30,\n            width: 200,\n        },\n        textFieldTwo: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            marginTop: 30,\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <div className={classes.container}>\n                <TextField\n                    type=\"date\"\n                    name=\"date\"\n                    value={currentDate}\n                    onChange={handleChangeTwo}\n                    defaultValue={defaultvalues.date}\n                    className={classes.textField}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <br></br>\n                <div className=\"root\">\n                    <TextField\n                        variant=\"outlined\"\n                        placeholder=\"diary\"\n                        multiline\n                        rows={8}\n                        rowsMax={10}\n                        value={currentJournalEntry}\n                        defaultValue={defaultvalues.entry}\n                        onChange={handleChange} />\n                </div>\n                <Button onClick={constructANewDay}\n                    style={{ backgroundColor: \"#1B4353\", margin: 10 }}\n                    className={classes.Button} variant=\"contained\"\n                    color=\"primary\">submit</Button>\n            </div>\n            <br />\n        </>\n    );\n}","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalsForm.js",["130"],"import React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GoalContext } from './GoalProvider'\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\nimport './goals.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'start',\n        marginLeft: 30,\n        marginTop: 50\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200,\n    },\n    root: {\n        width: 300,\n        marginTop: 35,\n        marginLeft: 30\n\n    },\n    Button: {\n        height: 40,\n        marginLeft: 10\n    }\n}));\n\nexport const GoalsForm = (props) => {\n\n    const { getGoalData, goalData, createGoalData, getGoalDataById, updateGoalData } = useContext(GoalContext)\n    const [defaultvalues, setDefaultvalues] = useState({})\n    const [name, setName] = useState([])\n    const [goalLength, setGoalLength] = useState([])\n    const [goalReason, setGoalReason] = useState([])\n\n\n\n    useEffect(() => {\n        getGoalData()\n        getGoalDataById(props.match.params.goalId)\n            .then(res => setDefaultvalues(res))\n\n    }, [])\n\n    const editMode = props.match.params.goalId\n\n    const classes = useStyles();\n\n    const getValue = (e) => {\n        const data = e.target.value;\n        setName(data)\n    }\n\n    const getValueTwo = (e) => {\n        const data = e.target.value;\n        setGoalLength(data)\n    }\n\n    const getValueThree = (e) => {\n        const data = e.target.value;\n        setGoalReason(data)\n    }\n\n    const constructANewGoal = () => {\n        const dateData = new Date().toISOString().slice(0, 10);\n        if (editMode) {\n            updateGoalData({\n                id: editMode,\n                user_id: parseInt(localStorage.getItem(\"user_id\")),\n                date: dateData,\n                goal_name: name,\n                goal_length: goalLength,\n                goal_reason: goalReason\n            })\n        } else {\n\n            const newGoal = {\n                user_id: parseInt(localStorage.getItem(\"user_id\")),\n                date: dateData,\n                goal_name: name,\n                goal_length: goalLength,\n                goal_reason: goalReason\n            }\n            createGoalData(newGoal)\n        }\n    }\n\n    return <>\n\n        <div className=\"goals_container\">\n            <form className={classes.container} noValidate>\n                <TextField\n                    id=\"date\"\n                    label=\"date\"\n                    type=\"date\"\n                    defaultValue={defaultvalues.date}\n                    className={classes.textField}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n            </form>\n            <br />\n            <br />\n        </div>\n        <div className=\"checkbox_container\">\n            <br></br>\n            {goalData.map((val) => {\n                return (\n                    <div key={val}>\n                        <ol>\n                            <h3 style={{ margin: 15 }}>{val.goal_name}</h3>\n                        </ol>\n                    </div>)\n            })}\n        </div>\n        <br></br>\n        <div className=\"goal_input\">\n            <TextField   defaultValue={defaultvalues.goal_name} type=\"input\" id=\"standard-basic\" label=\"goal-title\" onChange={getValue} />\n        </div>\n        <div className=\"goal_input\">\n            <TextField type=\"input\" id=\"standard-basic\" defaultValue={defaultvalues.goal_length} label=\"length of goal\" onChange={getValueTwo} />\n        </div>\n        <div className=\"goal_input\">\n            <TextField\n                variant=\"outlined\"\n                placeholder=\"reason for goal\"\n                multiline\n                defaultValue={defaultvalues.goal_reason}\n                rows={8}\n                rowsMax={10}\n                onChange={getValueThree}\n            />\n        </div>\n        <div className=\"button_container\">\n            <Button onClick={constructANewGoal} style={{ backgroundColor: \"#1B4353\", marginLeft: 10 }} className={classes.Button} variant=\"contained\" color=\"primary\">submit</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/journalentry/JournalEntryProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/GoalProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/Goals.js",["131","132","133"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GoalContext } from './GoalProvider'\nimport { CheckedGoalsContext } from './CheckedGoalProvider'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { CompletedGoals } from './CompletedGoalsList'\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select_container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n\n    },\n    root: {\n        width: 200,\n        height: 300,\n\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n\n\n}));\n\nexport function GoalsList(props) {\n\n    const { getGoalData, goalData, deleteGoalData } = useContext(GoalContext)\n    const { getCheckedGoalsData, createCheckedGoalsData  } = useContext(CheckedGoalsContext)\n    const [goal_name, setGoalName] = React.useState('');\n    const [open, setOpen] = React.useState(false);\n    const [selectedValue, setSelectValue] = React.useState([]);\n    const [isClicked, setIsClicked] = React.useState(false);\n\n    const classes = useStyles();\n\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(\"/goalsform\");\n    }\n\n    useEffect(() => {\n        getGoalData()\n        getCheckedGoalsData()\n\n    }, [])\n\n\n    const handleChange = (event) => {\n        setGoalName(event.target.value);\n        setSelectValue(event.target.value)\n    };\n\n    const goalFilter = goalData.filter((goal) => {\n        return goal.id === selectedValue\n    })\n\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const toggleButtonCreate = (event) => {\n        setIsClicked(event.target.value)\n    }\n\n    const constructACheckedGoal = () => {\n        const dateData = new Date().toISOString().slice(0, 10);\n        const newCheckedGoal = {\n            date: dateData,\n            goal: selectedValue,\n            checked: isClicked,\n            user: parseInt(localStorage.getItem(\"user_id\"))\n        }\n        createCheckedGoalsData(newCheckedGoal)\n    }\n\n    return <>\n        <div className=\"goals_button\">\n            <CompletedGoals />\n        </div>\n        <div className={classes.select_container}>\n\n            <Button className={classes.button} onClick={handleOpen}>\n                Open the select\n      </Button>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">Goals</InputLabel>\n                <Select\n                    labelId=\"demo-controlled-open-select-label\"\n                    id=\"demo-controlled-open-select\"\n                    open={open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    value={goal_name}\n                    onChange={handleChange}>\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    {goalData.map(item => {\n                        return <MenuItem value={item.id}>{item.goal_name}</MenuItem>;\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n        <div className=\"card_container\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {goalFilter.map(val => {\n                            return <div key={val.id}>\n                                <h2 style={{ fontSize: 'Bolder' }}>Goal title: {val.goal_name}</h2>\n                                <h3 style={{ fontSize: 'Bolder' }}>Goal length: {val.goal_length}</h3>\n                                <h4 style={{ fontSize: 'Bolder' }}>Reason: {val.goal_reason}</h4>\n                                <Button onClick={() => deleteGoalData(val.id)}>\n                                    Remove Goal\n                           </Button>\n                           <Button onClick={() => {\n                                    history.push(`/goalsform/edit/${val.id}`)\n                                }}>Edit</Button>\n                            </div>\n                            \n                        })}\n                    </Typography>\n\n                </CardContent>\n            </Card>\n        </div>\n        <div className='button_container'>\n            <Button onChange={(e) => toggleButtonCreate(e)} onClick={constructACheckedGoal} checked={isClicked} >log-goal</Button>\n            <Button onClick={handleClick} >create a new goal</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/goals/CheckedGoalProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/CompletedGoalsList.js",["134","135"],"import React, { useState, useContext, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { CheckedGoalsContext } from './CheckedGoalProvider'\n\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position:'absolute',\n        top:'10%',\n        left:'10%',\n        width: 300,\n        maxHeight: 300,\n        display:'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        overflow: 'scroll',\n        backgroundColor: 'white'\n\n    },\n}));\n\n\n\nexport function CompletedGoals() {\n\n    const { getCheckedGoalsData, checkedGoals } = useContext(CheckedGoalsContext)\n\n    useEffect(() => {\n        getCheckedGoalsData()\n    }, [])\n\n\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const body = (\n\n        <div style={modalStyle} className={classes.paper}>\n            <h3>dates completed</h3>\n            {checkedGoals.map(item => {\n                return <div>\n                    <h4 id=\"simple-modal-description\">{item.goal.goal_name}</h4>\n                    <p id=\"simple-modal-description\"> date-completed: {item.date}</p>\n                </div>\n            })}\n        </div>\n    );\n\n    return (\n        <div className modal_button>\n            <Button type=\"button\" onClick={handleOpen}>\n                completed goal dates\n          </Button>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n        </div>\n    );\n}\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingList.js",["136","137"],"import React, { useContext, useEffect } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { WellBeingContext } from './WellBeingProvider'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select_container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n    root: {\n\n        display: 'flex',\n        minHeight: 300,\n        minWidth: 200\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n}));\n\nexport function WellBeingList(props) {\n\n    const [open, setOpen] = React.useState(false);\n    const [selectedWellBeingValue, setWellBeingValue] = React.useState([]);\n    // const [selectedValue, setSelectedValue] = React.useState([]);\n    const { getWellBeingData, wellBeingData, deleteWellBeingData } = useContext(WellBeingContext)\n\n    const classes = useStyles();\n\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(\"/wellbeingform\");\n    }\n\n    useEffect(() => {\n        getWellBeingData()\n    }, [])\n\n    const handleChange = (event) => {\n        setWellBeingValue(event.target.value);\n        // setSelectedValue(event.target.value)\n    };\n\n    const filteredWellBeingData = wellBeingData.filter((val) => {\n        return val.id === selectedWellBeingValue\n    })\n\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const sortedData = filteredWellBeingData.sort((a, b) => {\n        return b - a;\n    })\n\n    return <>\n\n        <div className={classes.select_container}>\n\n            <Button className={classes.button} onClick={handleOpen}>\n                Open the select\n      </Button>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">wellness-list</InputLabel>\n                <Select\n                    labelId=\"demo-controlled-open-select-label\"\n                    id=\"demo-controlled-open-select\"\n                    open={open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    value={selectedWellBeingValue}\n                    onChange={handleChange}>\n\n                    <MenuItem>\n                        none\n                    </MenuItem>\n                    {wellBeingData.map(item => {\n                        return <MenuItem value={item.id}>{item.date}</MenuItem>;\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n        <div className=\"card_container\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {sortedData.map(value => {\n                            return <div key={value.id}>\n                                <h3 style={{ fontSize: 'small' }}>date: {value.date}</h3>\n                                <h3 style={{ fontSize: 'small' }}>Fatigue-Scale {value.fatigueScale}</h3>\n                                <h3 style={{ fontSize: 'small' }}>painScale: {value.painScale}</h3>\n                                <h3 style={{ fontSize: 'small' }}>emotionalWellBeing: {value.emotionalWellBeing}</h3>\n                                <h3 style={{ fontSize: 'small' }}>hoursOfSleep: {value.hoursOfSleep}</h3>\n                                {value.noSymptoms ? <h3 style={{ fontSize: 'small' }}>noSymptoms {value.noSymptoms}</h3> : \"\"}\n                                {value.numbness ? <h3 style={{ fontSize: 'small' }}>numbness {value.numbness}</h3> : \"\"}\n                                {value.tingling ? <h3 style={{ fontSize: 'small' }}>tingling {value.tingling}</h3> : \"\"}\n                                {value.weakness ? <h3 style={{ fontSize: 'small' }}>weakness {value.weakness}</h3> : \"\"}\n                                {value.stiffness ? <h3 style={{ fontSize: 'small' }}>stiffness {value.stiffness}</h3> : \"\"}\n                                {value.coordinationOrBalanceProblems ? <h3 style={{ fontSize: 'small' }}>coordinationOrBalanceProblems {value.coordinationOrBalanceProblems}</h3> : \"\"}\n                                {value.heatSensitivity ? <h3 style={{ fontSize: 'small' }}>heatSensitivity {value.heatSensitivity}</h3> : \"\"}\n                                {value.incontenance ? <h3 style={{ fontSize: 'small' }}>incontenance {value.incontenance}</h3> : \"\"}\n                                {value.brainFog ? <h3 style={{ fontSize: 'small' }}>incontenance {value.brainFog}</h3> : \"\"}\n                                <br></br>\n                                <Button onClick={() => deleteWellBeingData(value.id)} >delete entry</Button>\n                                <Button onClick={() => {\n                                    history.push(`/wellbeingform/edit/${value.id}`)\n                                }}>Edit</Button>\n                            </div>\n                        })}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        <div className='button_container'>\n            <Button onClick={handleClick} >create a new wellness entry</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/journalentry/Journal.js",["138","139","140"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { JournalEntryContext } from './JournalEntryProvider'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select_container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n\n    },\n    root: {\n        width: 200,\n        height: 300,\n\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n\n\n}));\n\nexport function Journal() {\n\n    const { journalEntryData, getJournalEntryData, deleteJournalEntry } = useContext(JournalEntryContext)\n    const [journalentry, setJournalEntry] = React.useState([]);\n    const [open, setOpen] = React.useState(false);\n    const [selectedValue, setSelectValue] = React.useState([]);\n\n\n    const classes = useStyles();\n\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(\"/journalform\");\n    }\n\n    useEffect(() => {\n        getJournalEntryData()\n \n\n    }, [])\n\n     const handleChange = (event) => {\n       setJournalEntry(event.target.value);\n        setSelectValue(event.target.value)\n    };\n\n    const journalFilter = journalEntryData.filter((entry) => {\n        return entry.id === selectedValue\n    })\n\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    return <>\n\n        <div className={classes.select_container}>\n\n            <Button className={classes.button} onClick={handleOpen}>\n                Open the select\n      </Button>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">journal-entry</InputLabel>\n                <Select\n                    labelId=\"demo-controlled-open-select-label\"\n                    id=\"demo-controlled-open-select\"\n                    open={open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    value={journalentry}\n                    onChange={handleChange}>\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    {journalEntryData.map(item => {\n                        return <MenuItem value={item.id}>{item.date}</MenuItem>;\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n        <div className=\"card_container\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {journalFilter.map(entry => {\n                            return <div key={entry.id}>\n                                <h2 style={{ fontSize: 'Bolder' }}>date: {entry.date}</h2>\n                                <h3 style={{ fontSize: 'Bolder' }}>entry: {entry.entry}</h3>\n                                <Button onClick={() => deleteJournalEntry(entry.id)}>\n                                    Remove-Entry\n                           </Button>\n                           <Button onClick={() => {\n                                    history.push(`/journalform/edit/${entry.id}`)\n                                }}>Edit</Button>\n                            </div>\n                            \n                        })}\n                    </Typography>\n\n                </CardContent>\n                \n            </Card>\n        </div>\n        <div className='button_container'>\n      \n            <Button onClick={handleClick} >create a new entry</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/articles/Articles.js",["141"],"/home/useradd/workspace/python/days-since-client/src/components/articles/ArticleProvider.js",["142"],"/home/useradd/workspace/python/days-since-client/src/components/articles/ArticleForm.js",["143"],"/home/useradd/workspace/python/days-since-client/src/components/comments/Comments.js",["144","145"],"/home/useradd/workspace/python/days-since-client/src/components/comments/CommentProvider.js",["146","147"],"/home/useradd/workspace/python/days-since-client/src/components/comments/CommentForm.js",["148"],"import React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CommentContext } from './CommentProvider'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n\n    },\n  },\n}));\n\n\nexport  function CommentForm(props) {\n\n    const {  createCommentData, getCommentsByArticleId } = useContext(CommentContext)\n    const [localState, setLocalState] = useState({})\n    // const [newLocal, setNewLocal] = useState([])\n\n    const classes = useStyles();\n\n    \n    console.log(props.match.params.articleId)\n\n\n\n\n  const handleControlledInputChange = (e) => {\n        const newCommentObject = Object.assign({}, localState)\n        newCommentObject[e.target.name] = e.target.value\n        setLocalState(newCommentObject)\n    }\n\n    const constructANewComment = () => {\n\n    const newComment = {\n            user: parseInt(localStorage.getItem(\"user_id\")),\n            comment: localState.comment,\n            article: parseInt(props.match.params.articleId)\n      }\n        createCommentData(newComment).then(() => {\n          getCommentsByArticleId(props.match.params.articleId)\n        })\n    }\n\n  return (\n    <div className=\"comment_form_container\">\n    <form className={classes.root} noValidate autoComplete=\"off\">\n    <TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" name='comment' defaultValue={localState.comment} onChange={handleControlledInputChange} />\n    <Button onClick={constructANewComment}>submit comment</Button>\n    </form>\n    </div>\n  );\n}",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":53,"column":67,"nodeType":"155","endLine":53,"endColumn":72},{"ruleId":"156","severity":1,"message":"157","line":10,"column":10,"nodeType":"158","messageId":"159","endLine":10,"endColumn":15},{"ruleId":"156","severity":1,"message":"160","line":10,"column":17,"nodeType":"158","messageId":"159","endLine":10,"endColumn":25},{"ruleId":"156","severity":1,"message":"161","line":12,"column":11,"nodeType":"158","messageId":"159","endLine":12,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":23,"column":7,"nodeType":"164","endLine":23,"endColumn":9,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":61,"column":17,"nodeType":"168","endLine":61,"endColumn":39},{"ruleId":"156","severity":1,"message":"169","line":2,"column":16,"nodeType":"158","messageId":"159","endLine":2,"endColumn":26},{"ruleId":"162","severity":1,"message":"170","line":74,"column":8,"nodeType":"164","endLine":74,"endColumn":10,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":105,"column":37,"nodeType":"174","messageId":"175","endLine":105,"endColumn":39},{"ruleId":"153","severity":1,"message":"154","line":380,"column":45,"nodeType":"155","endLine":380,"endColumn":60},{"ruleId":"162","severity":1,"message":"176","line":20,"column":8,"nodeType":"164","endLine":20,"endColumn":10,"suggestions":"177"},{"ruleId":"162","severity":1,"message":"178","line":49,"column":8,"nodeType":"164","endLine":49,"endColumn":10,"suggestions":"179"},{"ruleId":"156","severity":1,"message":"180","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"156","severity":1,"message":"181","line":2,"column":22,"nodeType":"158","messageId":"159","endLine":2,"endColumn":26},{"ruleId":"162","severity":1,"message":"182","line":74,"column":8,"nodeType":"164","endLine":74,"endColumn":10,"suggestions":"183"},{"ruleId":"156","severity":1,"message":"180","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"184","line":47,"column":8,"nodeType":"164","endLine":47,"endColumn":10,"suggestions":"185"},{"ruleId":"156","severity":1,"message":"181","line":2,"column":22,"nodeType":"158","messageId":"159","endLine":2,"endColumn":26},{"ruleId":"162","severity":1,"message":"186","line":65,"column":8,"nodeType":"164","endLine":65,"endColumn":10,"suggestions":"187"},{"ruleId":"156","severity":1,"message":"180","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"156","severity":1,"message":"181","line":2,"column":22,"nodeType":"158","messageId":"159","endLine":2,"endColumn":26},{"ruleId":"162","severity":1,"message":"188","line":72,"column":8,"nodeType":"164","endLine":72,"endColumn":10,"suggestions":"189"},{"ruleId":"162","severity":1,"message":"190","line":42,"column":8,"nodeType":"164","endLine":42,"endColumn":10,"suggestions":"191"},{"ruleId":"156","severity":1,"message":"192","line":46,"column":15,"nodeType":"158","messageId":"159","endLine":46,"endColumn":21},{"ruleId":"162","severity":1,"message":"190","line":51,"column":8,"nodeType":"164","endLine":51,"endColumn":10,"suggestions":"193"},{"ruleId":"156","severity":1,"message":"181","line":5,"column":10,"nodeType":"158","messageId":"159","endLine":5,"endColumn":14},{"ruleId":"162","severity":1,"message":"194","line":15,"column":8,"nodeType":"164","endLine":15,"endColumn":10,"suggestions":"195"},{"ruleId":"156","severity":1,"message":"196","line":11,"column":11,"nodeType":"158","messageId":"159","endLine":11,"endColumn":25},{"ruleId":"156","severity":1,"message":"192","line":21,"column":15,"nodeType":"158","messageId":"159","endLine":21,"endColumn":21},{"ruleId":"156","severity":1,"message":"197","line":1,"column":39,"nodeType":"158","messageId":"159","endLine":1,"endColumn":48},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar","'setScore' is assigned a value but never used.","'createScoreBoard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getScoreBoardData'. Either include it or remove the dependency array.","ArrayExpression",["200"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'getWellBeingData', 'getWellBeingDataById', and 'props.match.params.wellBeingId'. Either include them or remove the dependency array.",["201"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getJournalEntryData', 'getJournalEntryDataById', and 'props.match.params.journalId'. Either include them or remove the dependency array.",["202"],"React Hook useEffect has missing dependencies: 'getGoalData', 'getGoalDataById', and 'props.match.params.goalId'. Either include them or remove the dependency array.",["203"],"'useState' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getCheckedGoalsData' and 'getGoalData'. Either include them or remove the dependency array.",["204"],"React Hook useEffect has a missing dependency: 'getCheckedGoalsData'. Either include it or remove the dependency array.",["205"],"React Hook useEffect has a missing dependency: 'getWellBeingData'. Either include it or remove the dependency array.",["206"],"React Hook useEffect has a missing dependency: 'getJournalEntryData'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has a missing dependency: 'getArticleData'. Either include it or remove the dependency array.",["208"],"'result' is assigned a value but never used.",["209"],"React Hook useEffect has missing dependencies: 'getCommentsByArticleId' and 'props.match.params.articleId'. Either include them or remove the dependency array.",["210"],"'getCommentById' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"227","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [getScoreBoardData]",{"range":"232","text":"233"},"Update the dependencies array to be: [getWellBeingData, getWellBeingDataById, props.match.params.wellBeingId]",{"range":"234","text":"235"},"Update the dependencies array to be: [getJournalEntryData, getJournalEntryDataById, props.match.params.journalId]",{"range":"236","text":"237"},"Update the dependencies array to be: [getGoalData, getGoalDataById, props.match.params.goalId]",{"range":"238","text":"239"},"Update the dependencies array to be: [getCheckedGoalsData, getGoalData]",{"range":"240","text":"241"},"Update the dependencies array to be: [getCheckedGoalsData]",{"range":"242","text":"243"},"Update the dependencies array to be: [getWellBeingData]",{"range":"244","text":"245"},"Update the dependencies array to be: [getJournalEntryData]",{"range":"246","text":"247"},"Update the dependencies array to be: [getArticleData]",{"range":"248","text":"249"},{"range":"250","text":"249"},"Update the dependencies array to be: [getCommentsByArticleId, props.match.params.articleId]",{"range":"251","text":"252"},[904,906],"[getScoreBoardData]",[2530,2532],"[getWellBeingData, getWellBeingDataById, props.match.params.wellBeingId]",[859,861],"[getJournalEntryData, getJournalEntryDataById, props.match.params.journalId]",[1269,1271],"[getGoalData, getGoalDataById, props.match.params.goalId]",[2004,2006],"[getCheckedGoalsData, getGoalData]",[1061,1063],"[getCheckedGoalsData]",[1788,1790],"[getWellBeingData]",[1764,1766],"[getJournalEntryData]",[1079,1081],"[getArticleData]",[1327,1329],[492,494],"[getCommentsByArticleId, props.match.params.articleId]"]