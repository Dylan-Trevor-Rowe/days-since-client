[{"/home/useradd/workspace/python/days-since-client/src/index.js":"1","/home/useradd/workspace/python/days-since-client/src/reportWebVitals.js":"2","/home/useradd/workspace/python/days-since-client/src/components/DaysSince.js":"3","/home/useradd/workspace/python/days-since-client/src/components/ApplicationViews.js":"4","/home/useradd/workspace/python/days-since-client/src/components/auth/Login.js":"5","/home/useradd/workspace/python/days-since-client/src/components/auth/Register.js":"6","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardList.js":"7","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardProvider.js":"8","/home/useradd/workspace/python/days-since-client/src/components/nav/NavBar.js":"9","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingForm.js":"10","/home/useradd/workspace/python/days-since-client/src/components/journalentry/journalEntryForm.js":"11","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalsForm.js":"12","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingProvider.js":"13","/home/useradd/workspace/python/days-since-client/src/components/journalentry/JournalEntryProvider.js":"14","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalProvider.js":"15","/home/useradd/workspace/python/days-since-client/src/components/goals/Goals.js":"16","/home/useradd/workspace/python/days-since-client/src/components/goals/CheckedGoalProvider.js":"17"},{"size":661,"mtime":1607631784522,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1607618335160,"results":"20","hashOfConfig":"19"},{"size":653,"mtime":1608075521544,"results":"21","hashOfConfig":"19"},{"size":1991,"mtime":1608495020351,"results":"22","hashOfConfig":"19"},{"size":2666,"mtime":1608311403132,"results":"23","hashOfConfig":"19"},{"size":3685,"mtime":1608156033764,"results":"24","hashOfConfig":"19"},{"size":2620,"mtime":1608075521569,"results":"25","hashOfConfig":"19"},{"size":1249,"mtime":1608150693918,"results":"26","hashOfConfig":"19"},{"size":1433,"mtime":1608075521562,"results":"27","hashOfConfig":"19"},{"size":10112,"mtime":1608484152498,"results":"28","hashOfConfig":"19"},{"size":2810,"mtime":1608255868539,"results":"29","hashOfConfig":"19"},{"size":3612,"mtime":1608503172091,"results":"30","hashOfConfig":"19"},{"size":2065,"mtime":1608075521579,"results":"31","hashOfConfig":"19"},{"size":1288,"mtime":1608150730675,"results":"32","hashOfConfig":"19"},{"size":1831,"mtime":1608493866089,"results":"33","hashOfConfig":"19"},{"size":4677,"mtime":1608503433913,"results":"34","hashOfConfig":"19"},{"size":1268,"mtime":1608494897272,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"z72w0g",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/useradd/workspace/python/days-since-client/src/index.js",[],["75","76"],"/home/useradd/workspace/python/days-since-client/src/reportWebVitals.js",[],"/home/useradd/workspace/python/days-since-client/src/components/DaysSince.js",[],"/home/useradd/workspace/python/days-since-client/src/components/ApplicationViews.js",[],"/home/useradd/workspace/python/days-since-client/src/components/auth/Login.js",[],"/home/useradd/workspace/python/days-since-client/src/components/auth/Register.js",[],"/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardList.js",["77","78","79","80","81"],"import React, { useContext, useEffect } from 'react';\nimport { ScoreBoardContext } from './ScoreBoardProvider'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport './ScoreBoard.css';\nexport const ScoreBoardList = (props) => {\n  const [score, setScore] = useState()\n  const [spacing] = React.useState(2);\n  const { createScoreBoard, getScoreBoardData, scoreBoardData } = useContext(ScoreBoardContext)\n  useEffect(() => {\n    getScoreBoardData()\n  // let counter = 0\n  //  const dateFinder = scoreBoardData.map((value)=> {\n  //      return value.created\n  //    })\n  //    const newDateFinder = new Date(dateFinder)\n  //    const nowsDate = Date.now()\n  //    if(newDateFinder > nowsDate ) {\n  //      setScore(counter++)\n   }, [])\n\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      height: 200,\n      width: 300,\n      marginTop: 50,\n      textAlign: 'center',\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n    Button: {\n      marginTop: 5\n    }\n  }));\n  const reversedScore = scoreBoardData.slice().reverse()\n const classes = useStyles();\n  return <>\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={spacing}>\n          <Grid>\n            <Paper className={classes.paper} style={{ backgroundColor: \"#9dabb1\" }}>\n              <div>\n                <h1 className=\"days_since_score\">Days Since</h1>\n                {reversedScore.slice(0, 1).map((value) => {\n                  return (\n                    <div>\n                    <h1>{value.daysSinceBoard}</h1>\n                    <Button style={{ backgroundColor: \"#1B4353\", margin:10 }} onClick={() => {}} className={classes.Button} variant=\"contained\" color=\"primary\">add a day</Button>\n                    </div>\n                  )\n                })}\n                <h1 className=\"score\"></h1>\n                {/* <Button style={{ backgroundColor: \"#1B4353\", margin:10 }} onClick={() => setScore(score + 1) & constructANewScore()} className={classes.Button} variant=\"contained\" color=\"primary\">add a day</Button>\n                <Button style={{ backgroundColor: \"#1B4353\", margin:10  }} onClick={() => setScore(0) & constructANewScore()} className={classes.Button} variant=\"contained\" color=\"primary\">reset</Button> */}\n              </div>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  </>\n}","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/nav/NavBar.js",["82"],"import React from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 3,\n\n  },\n});\n\nexport const NavBar = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  \n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n\n    <Paper className={classes.root}>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Link to='/' style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"home\"></Tab></Link>\n        <Link to=\"/wellbeing\" style={{ textDecoration: 'none', color: 'black' }} ><Tab label=\"well-being\"></Tab></Link>\n        <Link to=\"/journal\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"journal\"></Tab></Link>\n        <Link to=\"/goals\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"goals\"></Tab></Link>\n        <Link to=\"/articles\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"articles\"></Tab></Link>\n        <Link to=\"/login\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"log-out\"></Tab></Link>\n      </Tabs>\n    </Paper>\n  );\n}\n\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingForm.js",["83","84","85"],"import React, { useContext, useState, useEffect } from 'react';\nimport { WellBeingContext } from './WellBeingProvider'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport './WellBeing.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'center',\n        marginLeft: 30,\n        marginTop: 50,\n        width: 500\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200,\n    },\n}));\n\nexport function WellBeingForm() {\n    const { createWellBeingData, getWellBeingData } = useContext(WellBeingContext)\n\n    const [sliderValue, setSliderValue] = useState(0)\n    const updateRange = (e, data) => {\n        setSliderValue(data)\n    }\n    const [sliderValueTwo, setSliderValueTwo] = useState(0)\n    const updateRangeTwo = (e, data) => {\n        setSliderValueTwo(data)\n    }\n    const [sliderValueThree, setSliderValueThree] = useState(0)\n    const updateRangeThree = (e, data) => {\n        setSliderValueThree(data)\n    }\n    const [sliderValueFour, setSliderValueFour] = useState(0)\n    const updateRangeFour = (e, data) => {\n        setSliderValueFour(data)\n    }\n\n    const [tinglingChecked, setTinglingChecked] = useState(0)\n    const [noSymptomsChecked, setNoSymptomsChecked] = useState(0)\n    const [numbnessChecked, setNumbnessChecked] = useState(0)\n    const [weaknessChecked, setWeaknessChecked] = useState(0)\n    const [stiffnessChecked, setStiffnessChecked] = useState(0)\n    const [coordinationChecked, setCoordinationOrBalanceProblemsChecked] = useState(0)\n    const [heatSensitivityChecked, setHeatSensitivityChecked] = useState(0)\n    const [incontenanceChecked, setIncontenanceChecked] = useState(0)\n    const [brainFogChecked, setBrainFogChecked] = useState(0)\n\n\n    const classes = useStyles();\n\n    function valuetext(value) {\n        return `${value}`;\n    }\n    // initialize an empty state array\n    const [checkedValues, setCheckedValues] = useState([\n\n    ]);\n    // console.log(checkedValues)\n    useEffect(() => {\n        getWellBeingData()\n\n    }, [])\n\n\n    const toggle = (e) => {\n        const name = e.target.name;\n        if (name.includes('noSymptoms')) setNoSymptomsChecked(true)\n\n        if (name.includes('numbess')) setNumbnessChecked(true)\n\n        if (name.includes('tingling')) setTinglingChecked(true)\n\n        if (name.includes('weakness')) setWeaknessChecked(true)\n\n        if (name.includes('stiffness')) setStiffnessChecked(true)\n\n        if (name.includes('coordinationOrBalanceProblems')) setCoordinationOrBalanceProblemsChecked(true)\n\n        if (name.includes('heatSensitivity')) setHeatSensitivityChecked(true)\n\n        if (name.includes('incontenance')) setIncontenanceChecked(true)\n\n        if (name.includes('brainFog')) setBrainFogChecked(true)\n\n        console.log('toggle name', e.target.name);\n        // set a variable that equals the name that is checked\n        if (checkedValues.includes(name)) {\n            // if that name exists in the state array\n            const updatedCheckedValues = checkedValues.filter(checkedValue => {\n                // set a variable called updateCheckedValues that filters the values\n                // that have not been checked\n                return checkedValue != name\n            })\n            setCheckedValues(updatedCheckedValues)\n            // set those unchchecked values to your state array\n        } else {\n            const updatedCheckedValues = checkedValues.slice()\n            // else make a copy of the state array\n            updatedCheckedValues.push(name)\n            // push the checked names into the state array\n            setCheckedValues(updatedCheckedValues)\n        }\n    }\n\n    const constructANewDay = () => {\n\n        const dateData = new Date().toISOString().slice(0, 10);\n\n        const newEntry = {\n            user_id: localStorage.getItem(\"user_id\"),\n            date: dateData,\n            fatigueScale: sliderValue,\n            painScale: sliderValueTwo,\n            emotionalWellBeing: sliderValueThree,\n            hoursOfSleep: sliderValueFour,\n            noSymptoms: noSymptomsChecked,\n            numbness: numbnessChecked,\n            tingling: tinglingChecked,\n            weakness: weaknessChecked,\n            stiffness: stiffnessChecked,\n            coordinationOrBalanceProblems: coordinationChecked,\n            heatSensitivity: heatSensitivityChecked,\n            incontenance: incontenanceChecked,\n            brainFog: brainFogChecked,\n        }\n        createWellBeingData(newEntry)\n    }\n    return <>\n\n        <div className=\"slider_container\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>fatigue-scale: 1-5</h2>\n            </Typography>\n            <Slider\n\n                value={sliderValue}\n                onChange={updateRange}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={5}\n            />\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>pain-scale: 1-5</h2>\n            </Typography>\n            <Slider\n\n                value={sliderValueTwo}\n                onChange={updateRangeTwo}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={5}\n            />\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>emotional-well-being: 1-5</h2>\n            </Typography>\n            <Slider\n                onChange={updateRangeThree}\n                value={sliderValueThree}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={5}\n            />\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>hours of sleep</h2>\n            </Typography>\n            <Slider\n                onChange={updateRangeFour}\n                value={sliderValueFour}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={10}\n            />\n\n            <br />\n            <br />\n            <h2>Symptoms</h2>\n        </div>\n        <div className=\"checkbox_container\">\n            <FormControlLabel\n\n                value=\"noSymptoms\"\n                control={<Checkbox name=\"noSymptoms\" onChange={toggle} checked={checkedValues.includes('noSymptoms')} e color=\"primary\" />}\n                label=\"none\"\n                labelPlacement=\"top\"\n            />\n\n            <FormControlLabel\n\n                value=\"numbness\"\n                control={<Checkbox name='numbness' onChange={toggle} checked={checkedValues.includes('numbness')} color=\"primary\" />}\n                label=\"numbness\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"tingling\"\n                control={<Checkbox name='tingling' onChange={toggle} checked={checkedValues.includes('tingling')} color=\"primary\" />}\n                label='tingling'\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"weakness\"\n                control={<Checkbox name='weakness' onChange={toggle} checked={checkedValues.includes('weakness')} color=\"primary\" />}\n                label=\"weakness\"\n                labelPlacement=\"top\"\n            />\n        </div>\n        <div className=\"checkbox_container\">\n            <FormControlLabel\n\n                value=\"stiffness\"\n                control={<Checkbox name='stiffness' onChange={toggle} checked={checkedValues.includes('stiffness')} color=\"primary\" />}\n                label=\"stiffness\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"coordinationOrBalanceProblems\"\n                control={<Checkbox name='coordinationOrBalanceProblems' onChange={toggle} checked={checkedValues.includes('coordinationOrBalanceProblems')} color=\"primary\" />}\n                label=\"coordination-problems\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"heatSensitivity\"\n                control={<Checkbox name=\"heatSensitivity\" onChange={toggle} checked={checkedValues.includes('heatSensitivity')} color=\"primary\" />}\n                label=\"heat-sensitivity\"\n                labelPlacement=\"top\" />\n        </div>\n        <div className=\"checkbox_container\">\n            <FormControlLabel\n\n                value=\"incontenance\"\n                control={<Checkbox name=\"incontenance\" onChange={toggle} checked={checkedValues.includes('incontenance')} color=\"primary\" />}\n                label=\"incontenance\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"brainFog\"\n                control={<Checkbox name=\"brainFog\" onChange={toggle} checked={checkedValues.includes('brainFog')} color=\"primary\" />}\n                label=\"brain-fog\"\n                labelPlacement=\"top\"\n            />\n\n            <br></br>\n        </div>\n        <div className=\"button_container\">\n            <Button onClick={constructANewDay} style={{ backgroundColor: \"#1B4353\", margin: 10 }} className={classes.Button} variant=\"contained\" color=\"primary\" >submit</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/journalentry/journalEntryForm.js",["86"],"import React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { JournalEntryContext } from './JournalEntryProvider'\n\nexport const JournalEntryForm = () => {\n\n    useEffect(() => {\n        getJournalEntryData()\n\n    }, [])\n\n    const { getJournalEntryData, createJournalEntryData } = useContext(JournalEntryContext)\n    const [currentJournalEntry, setJournalEntry] = useState('')\n    const [currentDate, setCurrentDate] = useState('')\n\n    const handleChange = (e) => {\n        const name = e.target.value\n        setJournalEntry(name)\n    }\n\n    const handleChangeTwo = (e) => {\n        const name = e.target.value\n        setCurrentDate(name)\n    }\n\n    const dateData = new Date().toISOString().slice(0, 10);\n\n    const constructANewDay = (event) => {\n        const newEntry = {\n            date: dateData,\n            entry: currentJournalEntry,\n        }\n        createJournalEntryData(newEntry)\n    }\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n            alignContent: 'center'\n        },\n        textField: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            marginTop: 30,\n            width: 200,\n        },\n        textFieldTwo: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            marginTop: 30,\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <div className={classes.container}>\n                <TextField\n                    type=\"date\"\n                    name=\"date\"\n                    value={currentDate}\n                    onChange={handleChangeTwo}\n                    defaultValue=\"none\"\n                    className={classes.textField}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <br></br>\n                <div className=\"root\">\n                    <TextField\n                        variant=\"outlined\"\n                        placeholder=\"diary\"\n                        multiline\n                        rows={8}\n                        rowsMax={10}\n                        value={currentJournalEntry}\n                        onChange={handleChange} />\n                </div>\n                <Button onClick={constructANewDay}\n                    style={{ backgroundColor: \"#1B4353\", margin: 10 }}\n                    className={classes.Button} variant=\"contained\"\n                    color=\"primary\">submit</Button>\n            </div>\n            <br />\n        </>\n    );\n}","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalsForm.js",["87"],"/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/journalentry/JournalEntryProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/GoalProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/Goals.js",["88","89"],"/home/useradd/workspace/python/days-since-client/src/components/goals/CheckedGoalProvider.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":10,"column":10,"nodeType":"96","messageId":"97","endLine":10,"endColumn":15},{"ruleId":"94","severity":1,"message":"98","line":10,"column":17,"nodeType":"96","messageId":"97","endLine":10,"endColumn":25},{"ruleId":"94","severity":1,"message":"99","line":12,"column":11,"nodeType":"96","messageId":"97","endLine":12,"endColumn":27},{"ruleId":"100","severity":1,"message":"101","line":23,"column":7,"nodeType":"102","endLine":23,"endColumn":9,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":61,"column":17,"nodeType":"106","endLine":61,"endColumn":39},{"ruleId":"94","severity":1,"message":"107","line":2,"column":16,"nodeType":"96","messageId":"97","endLine":2,"endColumn":26},{"ruleId":"94","severity":1,"message":"108","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":17},{"ruleId":"100","severity":1,"message":"109","line":74,"column":8,"nodeType":"102","endLine":74,"endColumn":10,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":104,"column":37,"nodeType":"113","messageId":"114","endLine":104,"endColumn":39},{"ruleId":"100","severity":1,"message":"115","line":12,"column":8,"nodeType":"102","endLine":12,"endColumn":10,"suggestions":"116"},{"ruleId":"100","severity":1,"message":"117","line":42,"column":8,"nodeType":"102","endLine":42,"endColumn":10,"suggestions":"118"},{"ruleId":"94","severity":1,"message":"119","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"120","line":64,"column":8,"nodeType":"102","endLine":64,"endColumn":10,"suggestions":"121"},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar","'setScore' is assigned a value but never used.","'createScoreBoard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getScoreBoardData'. Either include it or remove the dependency array.","ArrayExpression",["124"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useHistory' is defined but never used.","'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'getWellBeingData'. Either include it or remove the dependency array.",["125"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getJournalEntryData'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has a missing dependency: 'getGoalData'. Either include it or remove the dependency array.",["127"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getCheckedGoalsData' and 'getGoalData'. Either include them or remove the dependency array.",["128"],"no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [getScoreBoardData]",{"range":"139","text":"140"},"Update the dependencies array to be: [getWellBeingData]",{"range":"141","text":"142"},"Update the dependencies array to be: [getJournalEntryData]",{"range":"143","text":"144"},"Update the dependencies array to be: [getGoalData]",{"range":"145","text":"146"},"Update the dependencies array to be: [getCheckedGoalsData, getGoalData]",{"range":"147","text":"148"},[904,906],"[getScoreBoardData]",[2484,2486],"[getWellBeingData]",[382,384],"[getJournalEntryData]",[925,927],"[getGoalData]",[1776,1778],"[getCheckedGoalsData, getGoalData]"]