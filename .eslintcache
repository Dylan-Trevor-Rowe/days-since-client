[{"/home/useradd/workspace/python/days-since-client/src/index.js":"1","/home/useradd/workspace/python/days-since-client/src/reportWebVitals.js":"2","/home/useradd/workspace/python/days-since-client/src/components/DaysSince.js":"3","/home/useradd/workspace/python/days-since-client/src/components/ApplicationViews.js":"4","/home/useradd/workspace/python/days-since-client/src/components/auth/Login.js":"5","/home/useradd/workspace/python/days-since-client/src/components/auth/Register.js":"6","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardList.js":"7","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardProvider.js":"8","/home/useradd/workspace/python/days-since-client/src/components/nav/NavBar.js":"9","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingForm.js":"10","/home/useradd/workspace/python/days-since-client/src/components/journalentry/journalEntryForm.js":"11","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalsForm.js":"12","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingProvider.js":"13","/home/useradd/workspace/python/days-since-client/src/components/journalentry/JournalEntryProvider.js":"14","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalProvider.js":"15","/home/useradd/workspace/python/days-since-client/src/components/goals/Goals.js":"16","/home/useradd/workspace/python/days-since-client/src/components/goals/CheckedGoalProvider.js":"17","/home/useradd/workspace/python/days-since-client/src/components/goals/CompletedGoalsList.js":"18","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingList.js":"19","/home/useradd/workspace/python/days-since-client/src/components/journalentry/Journal.js":"20"},{"size":661,"mtime":1607631784522,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1607618335160,"results":"23","hashOfConfig":"22"},{"size":653,"mtime":1608075521544,"results":"24","hashOfConfig":"22"},{"size":2620,"mtime":1608668051326,"results":"25","hashOfConfig":"22"},{"size":2666,"mtime":1608311403132,"results":"26","hashOfConfig":"22"},{"size":3685,"mtime":1608156033764,"results":"27","hashOfConfig":"22"},{"size":2620,"mtime":1608584874052,"results":"28","hashOfConfig":"22"},{"size":1249,"mtime":1608150693918,"results":"29","hashOfConfig":"22"},{"size":1433,"mtime":1608567320180,"results":"30","hashOfConfig":"22"},{"size":10324,"mtime":1608586844799,"results":"31","hashOfConfig":"22"},{"size":2810,"mtime":1608255868539,"results":"32","hashOfConfig":"22"},{"size":3595,"mtime":1608586420899,"results":"33","hashOfConfig":"22"},{"size":2497,"mtime":1608664032657,"results":"34","hashOfConfig":"22"},{"size":1655,"mtime":1608669558299,"results":"35","hashOfConfig":"22"},{"size":1988,"mtime":1608666349290,"results":"36","hashOfConfig":"22"},{"size":5103,"mtime":1608666184122,"results":"37","hashOfConfig":"22"},{"size":1268,"mtime":1608494897272,"results":"38","hashOfConfig":"22"},{"size":2279,"mtime":1608574380194,"results":"39","hashOfConfig":"22"},{"size":5529,"mtime":1608666122567,"results":"40","hashOfConfig":"22"},{"size":4151,"mtime":1608669508568,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"z72w0g",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/useradd/workspace/python/days-since-client/src/index.js",[],["91","92"],"/home/useradd/workspace/python/days-since-client/src/reportWebVitals.js",[],"/home/useradd/workspace/python/days-since-client/src/components/DaysSince.js",[],"/home/useradd/workspace/python/days-since-client/src/components/ApplicationViews.js",["93"],"/home/useradd/workspace/python/days-since-client/src/components/auth/Login.js",[],"/home/useradd/workspace/python/days-since-client/src/components/auth/Register.js",[],"/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardList.js",["94","95","96","97","98"],"import React, { useContext, useEffect } from 'react';\nimport { ScoreBoardContext } from './ScoreBoardProvider'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useState } from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport './ScoreBoard.css';\nexport const ScoreBoardList = (props) => {\n  const [score, setScore] = useState()\n  const [spacing] = React.useState(2);\n  const { createScoreBoard, getScoreBoardData, scoreBoardData } = useContext(ScoreBoardContext)\n  useEffect(() => {\n    getScoreBoardData()\n  // let counter = 0\n  //  const dateFinder = scoreBoardData.map((value)=> {\n  //      return value.created\n  //    })\n  //    const newDateFinder = new Date(dateFinder)\n  //    const nowsDate = Date.now()\n  //    if(newDateFinder > nowsDate ) {\n  //      setScore(counter++)\n   }, [])\n\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      height: 200,\n      width: 300,\n      marginTop: 50,\n      textAlign: 'center',\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n    Button: {\n      marginTop: 5\n    }\n  }));\n  const reversedScore = scoreBoardData.slice().reverse()\n const classes = useStyles();\n  return <>\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12}>\n        <Grid container justify=\"center\" spacing={spacing}>\n          <Grid>\n            <Paper className={classes.paper} style={{ backgroundColor: \"#9dabb1\" }}>\n              <div>\n                <h1 className=\"days_since_score\">Days Since</h1>\n                {reversedScore.slice(0, 1).map((value) => {\n                  return (\n                    <div>\n                    <h1>{value.daysSinceBoard}</h1>\n                    <Button style={{ backgroundColor: \"#1B4353\", margin:10 }} onClick={() => {}} className={classes.Button} variant=\"contained\" color=\"primary\">add a day</Button>\n                    </div>\n                  )\n                })}\n                <h1 className=\"score\"></h1>\n                {/* <Button style={{ backgroundColor: \"#1B4353\", margin:10 }} onClick={() => setScore(score + 1) & constructANewScore()} className={classes.Button} variant=\"contained\" color=\"primary\">add a day</Button>\n                <Button style={{ backgroundColor: \"#1B4353\", margin:10  }} onClick={() => setScore(0) & constructANewScore()} className={classes.Button} variant=\"contained\" color=\"primary\">reset</Button> */}\n              </div>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  </>\n}","/home/useradd/workspace/python/days-since-client/src/components/scoreboard/ScoreBoardProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/nav/NavBar.js",["99"],"import React from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 3,\n\n  },\n});\n\nexport const NavBar = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  \n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n\n    <Paper className={classes.root}>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        centered\n      >\n        <Link to='/' style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"home\"></Tab></Link>\n        <Link to=\"/wellbeing\" style={{ textDecoration: 'none', color: 'black' }} ><Tab label=\"well-being\"></Tab></Link>\n        <Link to=\"/journal\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"journal\"></Tab></Link>\n        <Link to=\"/goals\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"goals\"></Tab></Link>\n        <Link to=\"/articles\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"articles\"></Tab></Link>\n        <Link to=\"/login\" style={{ textDecoration: 'none', color: 'black' }}><Tab label=\"log-out\"></Tab></Link>\n      </Tabs>\n    </Paper>\n  );\n}\n\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingForm.js",["100","101","102"],"import React, { useContext, useState, useEffect } from 'react';\nimport { WellBeingContext } from './WellBeingProvider'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport './WellBeing.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'center',\n        marginLeft: 30,\n        marginTop: 50,\n        width: 500\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200,\n    },\n}));\n\nexport function WellBeingForm() {\n    const { createWellBeingData, getWellBeingData } = useContext(WellBeingContext)\n\n    const [sliderValue, setSliderValue] = useState(0)\n    const updateRange = (e, data) => {\n        setSliderValue(data)\n    }\n    const [sliderValueTwo, setSliderValueTwo] = useState(0)\n    const updateRangeTwo = (e, data) => {\n        setSliderValueTwo(data)\n    }\n    const [sliderValueThree, setSliderValueThree] = useState(0)\n    const updateRangeThree = (e, data) => {\n        setSliderValueThree(data)\n    }\n    const [sliderValueFour, setSliderValueFour] = useState(0)\n    const updateRangeFour = (e, data) => {\n        setSliderValueFour(data)\n    }\n\n    const [tinglingChecked, setTinglingChecked] = useState(0)\n    const [noSymptomsChecked, setNoSymptomsChecked] = useState(0)\n    const [numbnessChecked, setNumbnessChecked] = useState(0)\n    const [weaknessChecked, setWeaknessChecked] = useState(0)\n    const [stiffnessChecked, setStiffnessChecked] = useState(0)\n    const [coordinationChecked, setCoordinationOrBalanceProblemsChecked] = useState(0)\n    const [heatSensitivityChecked, setHeatSensitivityChecked] = useState(0)\n    const [incontenanceChecked, setIncontenanceChecked] = useState(0)\n    const [brainFogChecked, setBrainFogChecked] = useState(0)\n\n\n    const classes = useStyles();\n\n    function valuetext(value) {\n        return `${value}`;\n    }\n    // initialize an empty state array\n    const [checkedValues, setCheckedValues] = useState([\n\n    ]);\n    // console.log(checkedValues)\n    useEffect(() => {\n        getWellBeingData()\n\n    }, [])\n\n\n    const toggle = (e) => {\n        const name = e.target.name;\n        if (name.includes('noSymptoms')) {\n            setNoSymptomsChecked(true)\n        }\n\n        if (name.includes('numbess')) {\n            setNumbnessChecked(true)\n        }\n\n        if (name.includes('tingling')) {\n            setTinglingChecked(true)\n        }\n\n        if (name.includes('weakness')) {\n            setWeaknessChecked(true)\n        }\n        if (name.includes('stiffness')) {\n            setStiffnessChecked(true)\n        }\n\n\n        if (name.includes('coordinationOrBalanceProblems')) {\n            setCoordinationOrBalanceProblemsChecked(true)\n        }\n        if (name.includes('heatSensitivity')) {\n            setHeatSensitivityChecked(true)\n        }\n        if (name.includes('incontenance')) {\n            setIncontenanceChecked(true)\n        }\n        if (name.includes('brainFog')) {\n            setBrainFogChecked(true)\n        }\n        console.log('toggle name', e.target.name);\n        // set a variable that equals the name that is checked\n        if (checkedValues.includes(name)) {\n            // if that name exists in the state array\n            const updatedCheckedValues = checkedValues.filter(checkedValue => {\n                // set a variable called updateCheckedValues that filters the values\n                // that have not been checked\n                return checkedValue != name\n            })\n            setCheckedValues(updatedCheckedValues)\n            // set those unchchecked values to your state array\n        } else {\n            const updatedCheckedValues = checkedValues.slice()\n            // else make a copy of the state array\n            updatedCheckedValues.push(name)\n            // push the checked names into the state array\n            setCheckedValues(updatedCheckedValues)\n        }\n    }\n\n    const constructANewDay = () => {\n\n        const dateData = new Date().toISOString().slice(0, 10);\n\n        const newEntry = {\n            user_id: localStorage.getItem(\"user_id\"),\n            date: dateData,\n            fatigueScale: sliderValue,\n            painScale: sliderValueTwo,\n            emotionalWellBeing: sliderValueThree,\n            hoursOfSleep: sliderValueFour,\n            noSymptoms: noSymptomsChecked,\n            numbness: numbnessChecked,\n            tingling: tinglingChecked,\n            weakness: weaknessChecked,\n            stiffness: stiffnessChecked,\n            coordinationOrBalanceProblems: coordinationChecked,\n            heatSensitivity: heatSensitivityChecked,\n            incontenance: incontenanceChecked,\n            brainFog: brainFogChecked,\n        }\n        createWellBeingData(newEntry)\n    }\n    return <>\n\n        <div className=\"slider_container\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>fatigue-scale: 1-5</h2>\n            </Typography>\n            <Slider\n\n                value={sliderValue}\n                onChange={updateRange}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={5}\n            />\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>pain-scale: 1-5</h2>\n            </Typography>\n            <Slider\n\n                value={sliderValueTwo}\n                onChange={updateRangeTwo}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={5}\n            />\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>emotional-well-being: 1-5</h2>\n            </Typography>\n            <Slider\n                onChange={updateRangeThree}\n                value={sliderValueThree}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={5}\n            />\n            <Typography id=\"discrete-slider\" gutterBottom>\n                <h2>hours of sleep</h2>\n            </Typography>\n            <Slider\n                onChange={updateRangeFour}\n                value={sliderValueFour}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider\"\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks\n                min={1}\n                max={10}\n            />\n\n            <br />\n            <br />\n            <h2>Symptoms</h2>\n        </div>\n        <div className=\"checkbox_container\">\n            <FormControlLabel\n\n                value=\"noSymptoms\"\n                control={<Checkbox name=\"noSymptoms\" onChange={toggle} checked={checkedValues.includes('noSymptoms')} e color=\"primary\" />}\n                label=\"none\"\n                labelPlacement=\"top\"\n            />\n\n            <FormControlLabel\n\n                value=\"numbness\"\n                control={<Checkbox name='numbness' onChange={toggle} checked={checkedValues.includes('numbness')} color=\"primary\" />}\n                label=\"numbness\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"tingling\"\n                control={<Checkbox name='tingling' onChange={toggle} checked={checkedValues.includes('tingling')} color=\"primary\" />}\n                label='tingling'\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"weakness\"\n                control={<Checkbox name='weakness' onChange={toggle} checked={checkedValues.includes('weakness')} color=\"primary\" />}\n                label=\"weakness\"\n                labelPlacement=\"top\"\n            />\n        </div>\n        <div className=\"checkbox_container\">\n            <FormControlLabel\n\n                value=\"stiffness\"\n                control={<Checkbox name='stiffness' onChange={toggle} checked={checkedValues.includes('stiffness')} color=\"primary\" />}\n                label=\"stiffness\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"coordinationOrBalanceProblems\"\n                control={<Checkbox name='coordinationOrBalanceProblems' onChange={toggle} checked={checkedValues.includes('coordinationOrBalanceProblems')} color=\"primary\" />}\n                label=\"coordination-problems\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"heatSensitivity\"\n                control={<Checkbox name=\"heatSensitivity\" onChange={toggle} checked={checkedValues.includes('heatSensitivity')} color=\"primary\" />}\n                label=\"heat-sensitivity\"\n                labelPlacement=\"top\" />\n        </div>\n        <div className=\"checkbox_container\">\n            <FormControlLabel\n\n                value=\"incontenance\"\n                control={<Checkbox name=\"incontenance\" onChange={toggle} checked={checkedValues.includes('incontenance')} color=\"primary\" />}\n                label=\"incontenance\"\n                labelPlacement=\"top\"\n            />\n            <FormControlLabel\n\n                value=\"brainFog\"\n                control={<Checkbox name=\"brainFog\" onChange={toggle} checked={checkedValues.includes('brainFog')} color=\"primary\" />}\n                label=\"brain-fog\"\n                labelPlacement=\"top\"\n            />\n\n            <br></br>\n        </div>\n        <div className=\"button_container\">\n            <Button onClick={constructANewDay} style={{ backgroundColor: \"#1B4353\", margin: 10 }} className={classes.Button} variant=\"contained\" color=\"primary\" >submit</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/journalentry/journalEntryForm.js",["103"],"import React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { JournalEntryContext } from './JournalEntryProvider'\n\nexport const JournalEntryForm = () => {\n\n    useEffect(() => {\n        getJournalEntryData()\n\n    }, [])\n\n    const { getJournalEntryData, createJournalEntryData } = useContext(JournalEntryContext)\n    const [currentJournalEntry, setJournalEntry] = useState('')\n    const [currentDate, setCurrentDate] = useState('')\n\n    const handleChange = (e) => {\n        const name = e.target.value\n        setJournalEntry(name)\n    }\n\n    const handleChangeTwo = (e) => {\n        const name = e.target.value\n        setCurrentDate(name)\n    }\n\n    const dateData = new Date().toISOString().slice(0, 10);\n\n    const constructANewDay = (event) => {\n        const newEntry = {\n            date: dateData,\n            entry: currentJournalEntry,\n        }\n        createJournalEntryData(newEntry)\n    }\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n            alignContent: 'center'\n        },\n        textField: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            marginTop: 30,\n            width: 200,\n        },\n        textFieldTwo: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            marginTop: 30,\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <div className={classes.container}>\n                <TextField\n                    type=\"date\"\n                    name=\"date\"\n                    value={currentDate}\n                    onChange={handleChangeTwo}\n                    defaultValue=\"none\"\n                    className={classes.textField}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <br></br>\n                <div className=\"root\">\n                    <TextField\n                        variant=\"outlined\"\n                        placeholder=\"diary\"\n                        multiline\n                        rows={8}\n                        rowsMax={10}\n                        value={currentJournalEntry}\n                        onChange={handleChange} />\n                </div>\n                <Button onClick={constructANewDay}\n                    style={{ backgroundColor: \"#1B4353\", margin: 10 }}\n                    className={classes.Button} variant=\"contained\"\n                    color=\"primary\">submit</Button>\n            </div>\n            <br />\n        </>\n    );\n}","/home/useradd/workspace/python/days-since-client/src/components/goals/GoalsForm.js",["104"],"import React, { useState, useContext, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GoalContext } from './GoalProvider'\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\nimport './goals.css'\n\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'start',\n        marginLeft: 30,\n        marginTop: 50\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 200,\n    },\n    root: {\n        width: 300,\n        marginTop: 35,\n        marginLeft: 30\n\n    },\n    Button: {\n        height: 40,\n        marginLeft: 10\n    }\n}));\n\nexport const GoalsForm = () => {\n\n    const { getGoalData, goalData, createGoalData } = useContext(GoalContext)\n\n\n    useEffect(() => {\n        getGoalData()\n\n    }, [])\n\n\n    const classes = useStyles();\n\n    const [name, setName] = useState([])\n    const [goalLength, setGoalLength] = useState([])\n    const [goalReason, setGoalReason] = useState([])\n\n    const getValue = (e) => {\n        const data = e.target.value;\n        setName(data)\n    }\n\n    const getValueTwo = (e) => {\n        const data = e.target.value;\n        setGoalLength(data)\n    }\n\n    const getValueThree = (e) => {\n        const data = e.target.value;\n        setGoalReason(data)\n    }\n\n    const constructANewGoal = () => {\n        const dateData = new Date().toISOString().slice(0, 10);\n        const newGoal = {\n            user_id: parseInt(localStorage.getItem(\"user_id\")),\n            date: dateData,\n            goal_name: name,\n            goal_length: goalLength,\n            goal_reason:goalReason\n        }\n        createGoalData(newGoal)\n    }\n\n    return <>\n\n        <div className=\"goals_container\">\n            <form className={classes.container} noValidate>\n                <TextField\n                    id=\"date\"\n                    label=\"date\"\n                    type=\"date\"\n                    defaultValue=\"none\"\n                    className={classes.textField}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n            </form>\n            <br />\n            <br />\n        </div>\n        <div className=\"checkbox_container\">\n            <br></br>\n            {goalData.map((val) => {\n                return (\n                    <div key={val}>\n                        <ol>\n                            <h3 style={{ margin: 15 }}>{val.goal_name}</h3>\n                        </ol>\n                    </div>)\n            })}\n        </div>\n        <br></br>\n        <div className=\"goal_input\">\n            <TextField type=\"input\" id=\"standard-basic\" label=\"goal-title\" onChange={getValue} />\n        </div>\n        <div className=\"goal_input\">\n            <TextField type=\"input\" id=\"standard-basic\" label=\"length of goal\" onChange={getValueTwo} />\n        </div>\n        <div className=\"goal_input\">\n        <TextField\n                        variant=\"outlined\"\n                        placeholder=\"reason for goal\"\n                        multiline\n                        rows={8}\n                        rowsMax={10}\n                        onChange={getValueThree}\n                         />\n        </div>\n        <div className=\"button_container\">\n            <Button onClick={constructANewGoal} style={{ backgroundColor: \"#1B4353\", marginLeft: 10 }} className={classes.Button} variant=\"contained\" color=\"primary\">submit</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/journalentry/JournalEntryProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/GoalProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/Goals.js",["105","106","107"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { GoalContext } from './GoalProvider'\nimport { CheckedGoalsContext } from './CheckedGoalProvider'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { CompletedGoals } from './CompletedGoalsList'\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select_container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n\n    },\n    root: {\n        width: 200,\n        height: 300,\n\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n\n\n}));\n\nexport function GoalsList() {\n\n    const { getGoalData, goalData, deleteGoalData } = useContext(GoalContext)\n    const { getCheckedGoalsData, createCheckedGoalsData  } = useContext(CheckedGoalsContext)\n    const [goal_name, setGoalName] = React.useState('');\n    const [open, setOpen] = React.useState(false);\n    const [selectedValue, setSelectValue] = React.useState([]);\n    const [isClicked, setIsClicked] = React.useState(false);\n\n    const classes = useStyles();\n\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(\"/goalsform\");\n    }\n\n    useEffect(() => {\n        getGoalData()\n        getCheckedGoalsData()\n\n    }, [])\n\n\n    const handleChange = (event) => {\n        setGoalName(event.target.value);\n        setSelectValue(event.target.value)\n    };\n\n    const goalFilter = goalData.filter((goal) => {\n        return goal.id === selectedValue\n    })\n\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const toggleButtonCreate = (event) => {\n        setIsClicked(event.target.value)\n    }\n\n    const constructACheckedGoal = () => {\n        const dateData = new Date().toISOString().slice(0, 10);\n        const newCheckedGoal = {\n            date: dateData,\n            goal: selectedValue,\n            checked: isClicked,\n            user: parseInt(localStorage.getItem(\"user_id\"))\n        }\n        createCheckedGoalsData(newCheckedGoal)\n    }\n\n    return <>\n        <div className=\"goals_button\">\n            <CompletedGoals />\n        </div>\n        <div className={classes.select_container}>\n\n            <Button className={classes.button} onClick={handleOpen}>\n                Open the select\n      </Button>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">Goals</InputLabel>\n                <Select\n                    labelId=\"demo-controlled-open-select-label\"\n                    id=\"demo-controlled-open-select\"\n                    open={open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    value={goal_name}\n                    onChange={handleChange}>\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    {goalData.map(item => {\n                        return <MenuItem value={item.id}>{item.goal_name}</MenuItem>;\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n        <div className=\"card_container\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {goalFilter.map(val => {\n                            return <div key={val.id}>\n                                <h2 style={{ fontSize: 'Bolder' }}>Goal title: {val.goal_name}</h2>\n                                <h3 style={{ fontSize: 'Bolder' }}>Goal length: {val.goal_length}</h3>\n                                <h4 style={{ fontSize: 'Bolder' }}>Reason: {val.goal_reason}</h4>\n                                <Button onClick={() => deleteGoalData(val.id)}>\n                                    Remove Goal\n                           </Button>\n                            </div>\n                        })}\n                    </Typography>\n\n                </CardContent>\n            </Card>\n        </div>\n        <div className='button_container'>\n            <Button onChange={(e) => toggleButtonCreate(e)} onClick={constructACheckedGoal} checked={isClicked} >log-goal</Button>\n            <Button onClick={handleClick} >create a new goal</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/goals/CheckedGoalProvider.js",[],"/home/useradd/workspace/python/days-since-client/src/components/goals/CompletedGoalsList.js",["108","109"],"import React, { useState, useContext, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { CheckedGoalsContext } from './CheckedGoalProvider'\n\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position:'absolute',\n        top:'10%',\n        left:'10%',\n        width: 300,\n        maxHeight: 300,\n        display:'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        overflow: 'scroll',\n        backgroundColor: 'white'\n\n    },\n}));\n\n\n\nexport function CompletedGoals() {\n\n    const { getCheckedGoalsData, checkedGoals } = useContext(CheckedGoalsContext)\n\n    useEffect(() => {\n        getCheckedGoalsData()\n    }, [])\n\n\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const body = (\n\n        <div style={modalStyle} className={classes.paper}>\n            <h3>dates completed</h3>\n            {checkedGoals.map(item => {\n                return <div>\n                    <h4 id=\"simple-modal-description\">{item.goal.goal_name}</h4>\n                    <p id=\"simple-modal-description\"> date-completed: {item.date}</p>\n                </div>\n            })}\n        </div>\n    );\n\n    return (\n        <div className modal_button>\n            <Button type=\"button\" onClick={handleOpen}>\n                completed goal dates\n          </Button>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n        </div>\n    );\n}\n","/home/useradd/workspace/python/days-since-client/src/components/wellbeing/WellBeingList.js",["110","111"],"import React, { useContext, useEffect } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { WellBeingContext } from './WellBeingProvider'\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        display: 'block',\n        marginTop: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    select_container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n    root: {\n        width: 250,\n        height: 535,\n        display: 'flex',\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n}));\n\nexport function WellBeingList() {\n\n    const [open, setOpen] = React.useState(false);\n    const [selectedWellBeingValue, setWellBeingValue] = React.useState([]);\n    // const [selectedValue, setSelectedValue] = React.useState([]);\n    const { getWellBeingData, wellBeingData, deleteWellBeingData } = useContext(WellBeingContext)\n\n    const classes = useStyles();\n\n    let history = useHistory();\n\n    function handleClick() {\n        history.push(\"/wellbeingform\");\n    }\n\n    useEffect(() => {\n        getWellBeingData()\n    }, [])\n\n    const handleChange = (event) => {\n        setWellBeingValue(event.target.value);\n        // setSelectedValue(event.target.value)\n    };\n\n    const filteredWellBeingData = wellBeingData.filter((val) => {\n        return val.id === selectedWellBeingValue\n    })\n\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const sortedData = filteredWellBeingData.sort((a, b) => {\n        return b - a;\n    })\n\n    return <>\n\n        <div className={classes.select_container}>\n\n            <Button className={classes.button} onClick={handleOpen}>\n                Open the select\n      </Button>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">wellness-list</InputLabel>\n                <Select\n                    labelId=\"demo-controlled-open-select-label\"\n                    id=\"demo-controlled-open-select\"\n                    open={open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    value={selectedWellBeingValue}\n                    onChange={handleChange}>\n                    <MenuItem value=\"\">\n                        <em>None</em>\n                    </MenuItem>\n                    {wellBeingData.map(item => {\n                        return <MenuItem value={item.id}>{item.date}</MenuItem>;\n                    })}\n                </Select>\n            </FormControl>\n        </div>\n        <div className=\"card_container\">\n            <Card className={classes.root}>\n                <CardContent>\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        {sortedData.map(value => {\n                            return <div key={value.id}>\n                                <h3 style={{ fontSize: 'small' }}>date: {value.date}</h3>\n                                <h3 style={{ fontSize: 'small' }}>Fatigue-Scale {value.fatigueScale}</h3>\n                                <h3 style={{ fontSize: 'small' }}>painScale: {value.painScale}</h3>\n                                <h3 style={{ fontSize: 'small' }}>emotionalWellBeing: {value.emotionalWellBeing}</h3>\n                                <h3 style={{ fontSize: 'small' }}>hoursOfSleep: {value.hoursOfSleep}</h3>\n                                <h3 style={{ fontSize: 'small' }}>noSymptoms {value.noSymptoms}</h3>\n                                <h3 style={{ fontSize: 'small' }}>numbness {value.numbness}</h3>\n                                <h3 style={{ fontSize: 'small' }}>tingling {value.tingling}</h3>\n                                <h3 style={{ fontSize: 'small' }}>weakness {value.weakness}</h3>\n                                <h3 style={{ fontSize: 'small' }}>stiffness {value.stiffness}</h3>\n                                <h3 style={{ fontSize: 'small' }}>coordinationOrBalanceProblems {value.coordinationOrBalanceProblems}</h3>\n                                <h3 style={{ fontSize: 'small' }}>heatSensitivity {value.heatSensitivity}</h3>\n                                <h3 style={{ fontSize: 'small' }}>incontenance {value.incontenance}</h3>\n                                <h3 style={{ fontSize: 'small' }}>incontenance {value.brainFog}</h3>\n                                <br></br>\n                                <Button onClick={() => deleteWellBeingData(value.id)} >delete entry</Button>\n                            </div>\n                        })}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n        <div className='button_container'>\n            <Button onClick={handleClick} >create a new wellness entry</Button>\n        </div>\n    </>\n}\n","/home/useradd/workspace/python/days-since-client/src/components/journalentry/Journal.js",["112","113","114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":17,"nodeType":"121","messageId":"122","endLine":2,"endColumn":30},{"ruleId":"119","severity":1,"message":"123","line":10,"column":10,"nodeType":"121","messageId":"122","endLine":10,"endColumn":15},{"ruleId":"119","severity":1,"message":"124","line":10,"column":17,"nodeType":"121","messageId":"122","endLine":10,"endColumn":25},{"ruleId":"119","severity":1,"message":"125","line":12,"column":11,"nodeType":"121","messageId":"122","endLine":12,"endColumn":27},{"ruleId":"126","severity":1,"message":"127","line":23,"column":7,"nodeType":"128","endLine":23,"endColumn":9,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":61,"column":17,"nodeType":"132","endLine":61,"endColumn":39},{"ruleId":"119","severity":1,"message":"133","line":2,"column":16,"nodeType":"121","messageId":"122","endLine":2,"endColumn":26},{"ruleId":"119","severity":1,"message":"134","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":17},{"ruleId":"126","severity":1,"message":"135","line":74,"column":8,"nodeType":"128","endLine":74,"endColumn":10,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":118,"column":37,"nodeType":"139","messageId":"140","endLine":118,"endColumn":39},{"ruleId":"126","severity":1,"message":"141","line":12,"column":8,"nodeType":"128","endLine":12,"endColumn":10,"suggestions":"142"},{"ruleId":"126","severity":1,"message":"143","line":42,"column":8,"nodeType":"128","endLine":42,"endColumn":10,"suggestions":"144"},{"ruleId":"119","severity":1,"message":"145","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"146","line":2,"column":22,"nodeType":"121","messageId":"122","endLine":2,"endColumn":26},{"ruleId":"126","severity":1,"message":"147","line":74,"column":8,"nodeType":"128","endLine":74,"endColumn":10,"suggestions":"148"},{"ruleId":"119","severity":1,"message":"145","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"149","line":47,"column":8,"nodeType":"128","endLine":47,"endColumn":10,"suggestions":"150"},{"ruleId":"119","severity":1,"message":"146","line":2,"column":22,"nodeType":"121","messageId":"122","endLine":2,"endColumn":26},{"ruleId":"126","severity":1,"message":"135","line":64,"column":8,"nodeType":"128","endLine":64,"endColumn":10,"suggestions":"151"},{"ruleId":"119","severity":1,"message":"145","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"146","line":2,"column":22,"nodeType":"121","messageId":"122","endLine":2,"endColumn":26},{"ruleId":"126","severity":1,"message":"141","line":72,"column":8,"nodeType":"128","endLine":72,"endColumn":10,"suggestions":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'score' is assigned a value but never used.","'setScore' is assigned a value but never used.","'createScoreBoard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getScoreBoardData'. Either include it or remove the dependency array.","ArrayExpression",["155"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useHistory' is defined but never used.","'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'getWellBeingData'. Either include it or remove the dependency array.",["156"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getJournalEntryData'. Either include it or remove the dependency array.",["157"],"React Hook useEffect has a missing dependency: 'getGoalData'. Either include it or remove the dependency array.",["158"],"'useState' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getCheckedGoalsData' and 'getGoalData'. Either include them or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'getCheckedGoalsData'. Either include it or remove the dependency array.",["160"],["161"],["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"165","fix":"175"},{"desc":"167","fix":"176"},"Update the dependencies array to be: [getScoreBoardData]",{"range":"177","text":"178"},"Update the dependencies array to be: [getWellBeingData]",{"range":"179","text":"180"},"Update the dependencies array to be: [getJournalEntryData]",{"range":"181","text":"182"},"Update the dependencies array to be: [getGoalData]",{"range":"183","text":"184"},"Update the dependencies array to be: [getCheckedGoalsData, getGoalData]",{"range":"185","text":"186"},"Update the dependencies array to be: [getCheckedGoalsData]",{"range":"187","text":"188"},{"range":"189","text":"180"},{"range":"190","text":"182"},[904,906],"[getScoreBoardData]",[2484,2486],"[getWellBeingData]",[382,384],"[getJournalEntryData]",[925,927],"[getGoalData]",[1999,2001],"[getCheckedGoalsData, getGoalData]",[1061,1063],"[getCheckedGoalsData]",[1777,1779],[1764,1766]]